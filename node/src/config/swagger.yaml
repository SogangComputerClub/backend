openapi: 3.0.0
info:
  title: Library API
  version: 1.0.0
  description: API documentation
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: Users
    description: User operations
  - name: Protected
    description: Protected routes
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme
      in: header
      name: Authorization
      example: Bearer <token>
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
              error:
                type: object
                properties:
                  name:
                    type: string
                    example: UnauthorizedError
                  message:
                    type: string
                    example: Unauthorized
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: User testuser does not have permission to acl_hello
              error:
                type: object
                properties:
                  name:
                    type: string
                    example: ForbiddenError
                  message:
                    type: string
                    example: Forbidden
paths:
  /auth/signup:
    post:
      summary: 회원가입
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: password123
                username:
                  type: string
                  example: testuser
      responses:
        "201":
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: 70896d14-da6c-4b51-a4b4-8ef628ff0248
                      email:
                        type: string
                        example: test@example.com
                      username:
                        type: string
                        example: testuser
                      created_at:
                        type: string
                        example: "2024-01-01T00:00:00.000Z"
                      updated_at:
                        type: string
                        example: "2024-01-01T00:00:00.000Z"
        "400":
          description: 회원가입 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/login:
    post:
      summary: 로그인
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: password123
      responses:
        "200":
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        "400":
          description: 로그인 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/logout:
    post:
      summary: 로그아웃
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: 로그아웃 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/token:
    post:
      summary: 토큰 갱신
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  example: refresh_token
                  required: true
                  enum:
                    - refresh_token
                refresh_token:
                  type: string
                  example: refreshToken123
                  required: true
      responses:
        "200":
          description: 토큰 갱신 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        "401":
          description: 토큰 갱신 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /book:
    get:
      summary: Retrieve all books in DB.
      tags:
        - books
      description: Fetches a list of books from the database.
      responses:
        "200":
          description: A sucessful response with an array of books.
        "500":
          description: Internal server error.
  /book/{id}:
    get:
      summary: Retrieve a book by ID.
      description: Fetches a list of book from the database using its ID.
      tags:
        - books
      parameters:
        - name: id
          in: path
          description: The unique ID of the book.
          schema:
            type: string
      responses:
        "200":
          description: A sucessful response with the requested book.
        "404":
          description: Book not found.
        "500":
          description: Internal server error.
  /protected/hello:
    get:
      summary: Protected hello endpoint
      description: >-
        Returns a greeting message for authenticated users. Requires a valid JWT
        token.
      tags:
        - Protected
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A greeting message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Hello from protected route
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /protected/acl_hello:
    get:
      summary: Protected hello endpoint, with ACL -
      description: >-
        Returns a greeting message for authenticated users. Requires a valid JWT
        token.
      tags:
        - Protected
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A greeting message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Hello from protected route
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: 34b224dd-a533-49dc-954a-d9bd25394609
                      email:
                        type: string
                        example: admin@sgcc.sogang.ac.kr
                      username:
                        type: string
                        example: admin
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
